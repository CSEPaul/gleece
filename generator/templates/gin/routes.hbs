package {{{PackageName}}}

{{> Imports}}

type Controller interface {
	SetRequest(request any)

	// SetStatus sets the status code for the GleeceController.
	SetStatus(statusCode definitions.HttpStatusCode)

	// GetStatus gets the status code for the GleeceController.
	GetStatus() *definitions.HttpStatusCode

	// SetHeader sets a header for the GleeceController.
	SetHeader(name string, value interface{})
}

func setResponseStatus(ctx *gin.Context, controller Controller, err error) {
	if err != nil {
		status := controller.GetStatus()
		if status == nil {
			ctx.Status(500)
		} else {
			ctx.Status(int(*status))
		}
	}
}

func RegisterRoutes(engine *gin.Engine) {
{{#each Controllers}}
	// {{{Name}}}
	{{#each Routes}}
		engine.{{{HttpVerb}}}("{{{../RestMetadata.Path}}}{{{RestMetadata.Path}}}", func(ctx *gin.Context) {
			controller := {{{Name}}}Import.{{../Name}}{}
			controller.SetRequest(ctx)
			{{#each FuncParams}}
				// Partial Start: RequestArgsParsing
				{{> RequestArgsParsing}}
				// Partial End: RequestArgsParsing
			{{/each}}

		{{#equal HasReturnValue true}}value, {{/equal}}err := controller.{{{OperationId}}}({{#each FuncParams}}{{ToLowerCamel Name}}{{#unless @last}}, {{/unless}}{{/each}})

		setResponseStatus(ctx, &controller, err)
	// Partial Start: RequestResponse
	{{> RequestResponse}}
	// Partial End: RequestResponse

	if err != nil {
		{{#if ErrorMiddleware}}
			ctx.{{{ResponseContentType}}}(errorMiddleware(ctx, err, {{{ResponseContentType}}}))
		{{else}}
			ctx.JSON("")
		{{/if}}
	}
	})
	{{/each}}
{{/each}}
}